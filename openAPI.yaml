openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/CW3-ALTA/EventPlanningApp/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/CW3-ALTA/EventPlanningApp/1.0.0
info:
  version: 1.0.0
  title: Event Planning App
  contact:
    name: Kristain Putra
    email: kputrapar@gmail.com
  license:
    name: APACHE 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

############## 
# AUTH
##############

paths:
  /login:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "@kristain123"
                password:
                  type: string
                  example: qwert123
      responses:
        '200':
          description: login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject' 
              example:
                data:
                  id: 1
                  name: "Robin Hood"
                  username: "@kristain123"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk"
                code: 200
                message: "login success"
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'

############## 
# USER
##############
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUsersSchema'
      responses:
        '201':
          description: succes insert user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Success Create Account
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Show detail user
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: show detail user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject' 
              example:
                data:
                  name: "Robin Hood"
                  email: "Robinhood@gmail.com"
                  address: "Jl. Kemana A No. 32"
                  pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                code: 200
                message: "success show profile"
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - Users
      summary: Update user data
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUsersSchema'
      responses:
        '200':
          description: update user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Success Update Data
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - Users
      summary: Deactive user account
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: deactive user account
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Success Deactive User Account
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'

############## 
# EVENT
##############
  /events:
    post:
      tags:
        - Events
      summary: Create a new event
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventSchema'
      responses:
        '201':
          description: insert event data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Success Create Event
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    get:
      tags:
        - Events
      summary: Get all event
      parameters:
        - in: query
          name: p
          description: page number
          schema:
            type: number
            example: 1
        - in: query
          name: rp
          description: record per page
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: get all events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                - id: 1
                  name: "Webinar: Your Product Manager Career by PlayStation Sr PM"
                  host_name: "Product School"
                  date: 2023-05-01T10:00:00Z
                  price: 50000
                  quota: 20
                  pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                - id: 2
                  name: "Webinar: Work training center"
                  host_name: "Government"
                  date: 2023-05-15T14:00:00Z
                  price: free
                  quota: 100
                  pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                code: 200
                message: "success show all event"
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
  /events/{event_id}:
    get:
      tags:
        - Events
      summary: Get event by id
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: event_id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: get events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'   
              example:
                data:
                  name: "Webinar: Your Product Manager Career by PlayStation Sr PM"
                  host_name: "Product School"
                  date: date-time
                  location: "Jakarta"
                  is_paid: false
                  quota: 20
                  details: "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
                  participants:
                      - id: 1
                        user_name: kristain
                        pictures: https://kurabsent.s3.amazonaws.com/123.jpg
                      - id: 2
                        user_name: yuda
                        pictures: https://kurabsent.s3.amazonaws.com/123.jpg
                  comments:
                      - id: 1
                        user_name: kristain
                        pictures: https://kurabsent.s3.amazonaws.com/123.jpg
                        comment: I think this is great event

                      - id: 2
                        user_name: yuda
                        pictures: https://kurabsent.s3.amazonaws.com/123.jpg
                        comment: I think this is good event
                code: 200
                message: "success get event by id"
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - Events
      summary: Update event
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: event_id
          schema:
            type: number
            example: 1
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventSchema'
      responses:
        '200':
          description: update event data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Success Update Event Data
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - Events
      summary: Delete event
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: event_id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: delete event
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Success Delete Event
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
  /myevent:
    get:
      tags:
        - Events
      summary: Get all event by user id
      security:
        - JWTAuth: []
      parameters:
        - in: query
          name: p
          description: page number
          schema:
            type: number
            example: 1
        - in: query
          name: rp
          description: record per page
          schema:
            type: number
            example: 10
      responses:
        '200':
          description: get all events by user id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  - id: 1
                    name: "Webinar: Your Product Manager Career by PlayStation Sr PM"
                    hosted_name: "Product School"
                    date: 2023-05-01T10:00:00Z
                    price: 50000
                    quota: 20
                    pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  - id: 2
                    name: "Webinar: Work training center"
                    hosted_name: "Government"
                    date: 2023-05-15T14:00:00Z
                    price: free
                    quota: 100
                    pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                code: 200
                message: "success show all event"
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'

############## 
# COMMENT
##############
  /comments:
    post:
      tags:
        - Comment
      summary: Comment on event
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                  example: 12
                comment:
                  type: string
                  example: "I think this is great event" 
      responses:
        '201':
          description: comment on event
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Success Create Comment
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'

############## 
# RESERVATION
##############
  /reservations/{event_id}:
    post:
      tags:
        - Reservations
      summary: "Join an event"
      description: "Insert data payment for reservation"
      parameters:
        - name: event_id
          description: event_id to join the event
          required: true
          in: path
          schema:
            type: integer
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: array
                items:
                    type: object
                    properties:
                      ticket_name:
                        type: string
                        example: VIP
                      quantity:
                        type: integer
                        example: 5
      responses:
        '200':
          description: booked event
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      reservation_id:
                        type: integer
                        example: 1
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Succes to join event
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'    
  /reservations/payment/{reservation_id}:
    post:
      tags: 
        - Reservations
      summary: makes payment for booked event
      parameters:
        - name: reservation_id
          description: reservation that has been join the event
          required: true
          in: path
          schema:
            type: integer
      security:
        -  JWTAuth: []
      requestBody:
          required: true
          content: 
            application/json:
              schema:
                type: object
                properties:
                  payment_type:
                    type: string
                    example: "back_transfer"
                  bank:
                    type: string
                    example: bca
                  cust_payment_detais:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                        example: norely@example.com
                      first_name:
                        type: string
                        example: "budi"
                      last_name:
                        type: string
                        example: "utomo"
                      phone:
                        type: string
                        example: 081223536464
                  payment_id:
                    type: integer
                    example: 1
      responses:
        '200':
          description: to create charge
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: succes to create payment charge
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
  /reservations/payment/details/{payment_id}:
    get:
      tags:
        - Reservations
      summary: makes payment for charged event
      security:
        -  JWTAuth: []
      parameters:
        - name: payment_id
          description: event_id to join the event
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: to get 
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      invoice_date:
                        type: string
                        format: date
                        example: 23/04/2023
                      event_name:
                        type: string
                        example: Level Up Your Business Through SEO
                      ticket_name:
                        type: string
                        example: reguler
                      status:
                        type: string
                        example: pending
                      total_price:
                        type: integer
                        example: 2000000
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: succes to create payment charge
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user token"
  responses:
    Response400:
      description: error from user
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: Bad Request
    Response404:
      description: data not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: Data not found
    Response500:
      description: error from server
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 500
              message:
                type: string
                example: Internal server error
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        code:
          type: number
        message:
          type: string
    UpdateUsersSchema:
      type: object
      properties:
        name:
          type: string
          example: Robin Hood
        email:
          type: string
          format: email
          example: kristain@gmail.com
        password:
          type: string
          example: qwert123
        address:
          type: string
          example: Jl. Kemana A No. 32
        pictures:
          type: string
          format: binary
          example: pictures.jpg
    RegisterUsersSchema:
      type: object
      properties:
        name:
          type: string
          example: Robin Hood
        email:
          type: string
          format: email
          example: kristain@gmail.com
        username:
          type: string
          example: "@kristain123"
        password:
          type: string
          example: qwert123
    EventSchema:
      type: object
      required:
        - name
        - date
        - location
        - host_name
        - quota
        - details
      properties:
        name:
          type: string
          example: "Webinar: Your Product Manager Career by PlayStation Sr PM"
        host_name:
          type: string
          example: "Product School"
        date:
          type: string
          format: date-time
        location:
          type: string
          example: "Jakarta"
        is_paid:
          type: boolean
          default: false
          example: true
        quota:
          type: integer
          example: 20
        details:
          type: string
          example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
        pictures:
          type: string
          format: binary
          example: pictures.jpg