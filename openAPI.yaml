openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/CW3-ALTA/EventPlanningApp/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/CW3-ALTA/EventPlanningApp/1.0.0
info:
  version: 1.0.0
  title: Event Planning App
  contact:
    name: Kristain Putra
    email: kputrapar@gmail.com
  license:
    name: APACHE 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

############## 
# AUTH
##############

paths:
  /login:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "@kristain123"
                password:
                  type: string
                  example: qwert123
      responses:
        '200':
          description: login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject' 
              example:
                data:
                  id: 1
                  name: "Robin Hood"
                  username: "@kristain123"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk"
                message: "login success"
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'

############## 
# USER
##############

  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUsersSchema'
      responses:
        '201':
          description: insert user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Success Create Account
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Show detail user
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: show detail user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject' 
              example:
                data:
                  name: "Robin Hood"
                  email: "Robinhood@gmail.com"
                  address: "Jl. Kemana A No. 32"
                  pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                message: "success show profile"
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - Users
      summary: Update user data
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUsersSchema'
      responses:
        '200':
          description: update user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Success Update Data
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - Users
      summary: Deactive user account
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: deactive user account
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Success Deactive User Account
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'

############## 
# EVENT
##############

  /events:
    post:
      tags:
        - Events
      summary: Create a new event
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventSchema'
      responses:
        '201':
          description: insert event data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Success Create Event
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    get:
      tags:
        - Events
      summary: Get all event
      parameters:
        - in: query
          name: p
          description: page number
          schema:
            type: number
            example: 1
        - in: query
          name: rp
          description: record per page
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: get all events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data: 
                 [
                  {
                    id: 1,
                    name: "Webinar: Your Product Manager Career by PlayStation Sr PM",
                    hosted_name: "Product School",
                    date: date-time,
                    price: "50000",
                    quota: 20,
                    pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  },
                  {
                    id: 2,
                    name: "Webinar: Work training center",
                    hosted_name": "Government",
                    date: date-time,
                    price: "free",
                    quota: 100,
                    pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  }
                 ]
                message: "success show all event"
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'
  /events/{id}:
    get:
      tags:
        - Events
      summary: Get event by id
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: get events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'   
              example:
                data:
                  name: "Webinar: Your Product Manager Career by PlayStation Sr PM"
                  hosted_name: "Product School"
                  date: date-time
                  location: "Jakarta"
                  price: "free"
                  quota: 20
                  details: "Lorem Ipsum is simply dummy text of the printing and typesetting industry."
                  participants:
                       [
                         {
                           id: 1,
                           "user_name": "kristain",
                           "pictures": "https://kurabsent.s3.amazonaws.com/123.jpg",
                         },
                         {
                           id: 2,
                           "user_name": "yuda",
                           "pictures": "https://kurabsent.s3.amazonaws.com/123.jpg",
                         },
                       ]
                  comment:
                       [
                        {
                          id: 1,
                          "user_name": "kristain",
                          "pictures": "https://kurabsent.s3.amazonaws.com/123.jpg",
                          "comment": "I think this is great event",
                        },
                        {
                          id: 2,
                          "user_name": "yuda",
                          "pictures": "https://kurabsent.s3.amazonaws.com/123.jpg",
                          "comment": "I think this is good event",
                        },
                       ]
                message: "success get event by id"
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    put:
      tags:
        - Events
      summary: Update event
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSchema'
      responses:
        '200':
          description: update event data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Success Update Event Data
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
    delete:
      tags:
        - Events
      summary: Delete event
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: number
            example: 1
          required: true
      responses:
        '200':
          description: delete event
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Success Delete Event
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
  /myevent:
    get:
      tags:
        - Events
      summary: Get all event by user id
      security:
        - JWTAuth: []
      parameters:
        - in: query
          name: p
          description: page number
          schema:
            type: number
            example: 1
        - in: query
          name: rp
          description: record per page
          schema:
            type: number
            example: 1
      responses:
        '200':
          description: get all events by user id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data: 
                 [
                  {
                    id: 1,
                    name: "Webinar: Your Product Manager Career by PlayStation Sr PM",
                    hosted_name: "Product School",
                    date: date-time,
                    price: "50000",
                    quota: 20,
                    pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  },
                  {
                    id: 2,
                    name: "Webinar: Work training center",
                    hosted_name": "Government",
                    date: date-time,
                    price: "free",
                    quota: 100,
                    pictures: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
                  }
                 ]
                message: "success show all event"
              
        '400':
          $ref: '#/components/responses/Response400'
        '404':
          $ref: '#/components/responses/Response404'
        '500':
          $ref: '#/components/responses/Response500'

############## 
# COMMENT
##############

  /comments:
    post:
      tags:
        - Comment
      summary: Comment on event
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                  example: 12
                comment:
                  type: string
                  example: "I think this is great event" 
      responses:
        '201':
          description: comment on event
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Success Create Comment
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'

############## 
# RESERVATION
##############

  /reservations:
    post:
      tags:
        - Reservations
      summary: "Create reservation payment"
      description: "Insert data payment for reservation"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                event_quota:
                  type: integer
            example:
              event_id: 1
              event_quota: 2
      responses:
        '200':
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  order_id: "HAPP-1679023702077060300"
                  redirect_url: "https://app.sandbox.midtrans.com/snap/v3/redirection/a7cd4588-1853-43a5-b23a-80fb26d161ff"
                message: "reservation success, waiting for payment"
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
  /paystatus:
    post:
      tags:
        - Reservations
      summary: "Payment Status"
      description: "Cek status pembayaran di Midtrans"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"
            example:
              order_id: "HAPP-1678981182881336700"
      responses:
        '200':
          description: "success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  order_id: "HAPP-1678981182881336700"
                  payment_status: "success"
                message: "reservation success, waiting for payment"
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user token"
  responses:
    Response400:
      description: error from user
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: Bad Request
    Response404:
      description: data not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 400
              message:
                type: string
                example: Data not found
    Response500:
      description: error from server
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: number
                example: 500
              message:
                type: string
                example: Internal server error
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    UpdateUsersSchema:
      type: object
      properties:
        name:
          type: string
          example: Robin Hood
        email:
          type: string
          format: email
          example: kristain@gmail.com
        password:
          type: string
          example: qwert123
        address:
          type: string
          example: Jl. Kemana A No. 32
        pictures:
          type: string
          format: binary
          example: pictures.jpg
    RegisterUsersSchema:
      type: object
      properties:
        name:
          type: string
          example: Robin Hood
        email:
          type: string
          format: email
          example: kristain@gmail.com
        username:
          type: string
          example: "@kristain123"
        password:
          type: string
          example: qwert123
    EventSchema:
      type: object
      properties:
        name:
          type: string
          example: "Webinar: Your Product Manager Career by PlayStation Sr PM"
        hosted_name:
          type: string
          example: "Product School"
        date:
          type: string
          format: date-time
        location:
          type: string
          example: "Jakarta"
        category:
          type: string
          example: "Games"
        price:
          type: string
          example: free
        quota:
          type: integer
          example: 20
        details:
          type: string
          example: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
        pictures:
          type: string
          format: binary
          example: pictures.jpg
    GetAllEventSchema:
      type: object
      properties:
        name:
          type: string
          example: "Webinar: Your Product Manager Career by PlayStation Sr PM"
        hosted_name:
          type: string
          example: "Product School"
        date:
          type: string
          format: date-time
        price:
          type: string
          example: free
        quota:
          type: integer
          example: 20
        pictures:
          type: string
          format: binary
          example: pictures.jpg
    Reservation:
      type: object
      required:
        - room_id
        - payment_id
        - date_start
        - date_end
        - duration
        - total_price
        - status
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the reservation
        room_id:
          type: integer
          format: int64
          description: The ID of the Room
        payment_id:
          type: integer
          format: int64
          description: The ID of the Payment
        date_start:
          type: string
          format: date
          description: Start date
        date_end:
          type: string
          format: date
          description: End date
        status:
          type: string
          description: Accept,Cancel,Done
        created_at:
          type: string
          format: date-time
          description: The date and time the team was created
        updated_at:
          type: string
          format: date-time
          description: The date and time the team was last updated
        deleted_at:
          type: string
          format: date-time
          description: The date and time the team was deleted
    
    Payment:
      type: object
      required:
        - type
        - name
        - number
        - cvv
        - month
        - year
      properties:
        id:
          type: integer
          format: int64
          description: The ID of the reservation
        type:
          type: string
          description: type
        name:
          type: string
          description: name
        number:
          type: string
          description: type
        cvv:
          type: string
          description: name
        month:
          type: string
          description: type
        year:
          type: string
          description: name
        created_at:
          type: string
          format: date-time
          description: The date and time the team was created
        updated_at:
          type: string
          format: date-time
          description: The date and time the team was last updated
        deleted_at:
          type: string
          format: date-time
          description: The date and time the team was deleted